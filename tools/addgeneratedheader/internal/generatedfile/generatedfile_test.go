package generatedfile

import (
	"io/ioutil"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func tempDir(t *testing.T) (string, func()) {
	t.Helper()
	dir, err := ioutil.TempDir("", "")
	require.NoError(t, err)
	teardown := func() {
		t.Helper()
		require.NoError(t, os.RemoveAll(dir))
	}
	return dir, teardown
}

func writeTestFile(t *testing.T, dir, content string) string {
	t.Helper()
	tmpFile, err := ioutil.TempFile(dir, "")
	require.NoError(t, err)
	_, err = tmpFile.WriteString(content)
	require.NoError(t, err)
	name := tmpFile.Name()
	err = tmpFile.Close()
	require.NoError(t, err)
	return name
}

func TestHasGeneratedComment(t *testing.T) {
	t.Run("false", func(t *testing.T) {
		dir, teardown := tempDir(t)
		defer teardown()
		fl := writeTestFile(t, dir, `
asdf
asdf
asdf
`)
		got, err := HasGeneratedComment(fl)
		assert.NoError(t, err)
		assert.False(t, got)
	})

	t.Run("true", func(t *testing.T) {
		dir, teardown := tempDir(t)
		defer teardown()
		fl := writeTestFile(t, dir, `
asdf
// Code generated by Joe Mama速 on behalf of Joe Mama Inc速 DO NOT EDIT.
asdf
`)
		got, err := HasGeneratedComment(fl)
		assert.NoError(t, err)
		assert.True(t, got)
	})
}

func TestAddGeneratedComment(t *testing.T) {
	t.Run("already generated", func(t *testing.T) {
		content := `
asdf
// Code generated by Joe Mama速 on behalf of Joe Mama Inc速 DO NOT EDIT.
asdf
`
		wantContent := content
		dir, teardown := tempDir(t)
		defer teardown()
		fl := writeTestFile(t, dir, content)
		err := AddGeneratedComment(fl, "nobody")
		assert.NoError(t, err)
		gotContent, err := ioutil.ReadFile(fl)
		require.NoError(t, err)
		assert.Equal(t, wantContent, string(gotContent))
	})

	t.Run("add statement", func(t *testing.T) {
		content := `
asdf
asdf
asdf
`
		wantContent := `// Code generated by me DO NOT EDIT.

asdf
asdf
asdf
`
		dir, teardown := tempDir(t)
		defer teardown()
		fl := writeTestFile(t, dir, content)
		err := AddGeneratedComment(fl, "by me")
		assert.NoError(t, err)
		gotContent, err := ioutil.ReadFile(fl)
		require.NoError(t, err)
		assert.Equal(t, wantContent, string(gotContent))
	})
}
